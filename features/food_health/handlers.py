"""Handlers for food and health functionality"""

import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import (
    download_image_as_base64, format_nutrition_text, 
    create_keyboard, get_current_timestamp
)
from .services import FoodAnalysisService, HealthProfileService, HealthAIService
from .models import WorkoutSession, StepsData

logger = logging.getLogger(__name__)

class FoodHealthHandlers:
    """Handlers for food and health functionality"""
    
    def __init__(self):
        self.food_service = FoodAnalysisService()
        self.health_service = HealthProfileService()
        self.ai_service = HealthAIService()
    
    async def handle_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle photo messages for food analysis"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            message_id = update.message.message_id
            
            # Get photo with highest resolution
            photo = update.message.photo[-1]
            
            # Get file URL
            file = await context.bot.get_file(photo.file_id)
            file_url = file.file_path
            
            # Download and convert to base64
            status_message = await update.message.reply_text(
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã...",
                reply_to_message_id=message_id
            )
            
            image_base64 = download_image_as_base64(file_url)
            if not image_base64:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # Analyze food
            analysis = await self.food_service.analyze_food_image(
                image_base64, user_id, chat_id, message_id
            )
            
            if not analysis or not analysis.food_items:
                await status_message.edit_text(
                    "ü§∑‚Äç‚ôÇÔ∏è –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –µ–¥—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
                )
                return
            
            # Format response
            response_text = "üçΩÔ∏è **–ê–ù–ê–õ–ò–ó –ï–î–´**\n\n"
            
            for i, food_item in enumerate(analysis.food_items, 1):
                response_text += f"**{i}. {food_item.name}**\n"
                if food_item.description:
                    response_text += f"_{food_item.description}_\n"
                response_text += f"üìè –ü–æ—Ä—Ü–∏—è: {food_item.portion_size}–≥\n"
                
                if food_item.nutrition:
                    response_text += f"üî• {food_item.nutrition.calories:.0f} –∫–∫–∞–ª\n"
                    response_text += f"ü•© –ë–µ–ª–∫–∏: {food_item.nutrition.protein:.1f}–≥\n"
                    response_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {food_item.nutrition.carbs:.1f}–≥\n"
                    response_text += f"ü•ë –ñ–∏—Ä—ã: {food_item.nutrition.fat:.1f}–≥\n"
                
                response_text += f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {food_item.confidence*100:.0f}%\n\n"
            
            # Total nutrition
            if analysis.total_nutrition:
                response_text += "**üìä –ò–¢–û–ì–û:**\n"
                response_text += format_nutrition_text(analysis.total_nutrition.to_dict())
            
            # Create action buttons
            keyboard = [
                [
                    InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"food_stats_{user_id}"),
                    InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data=f"health_goals_{user_id}")
                ],
                [
                    InlineKeyboardButton("üí° –°–æ–≤–µ—Ç", callback_data=f"health_advice_{user_id}"),
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data=f"food_search_{user_id}")
                ]
            ]
            
            await status_message.edit_text(
                response_text, 
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error handling photo message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    async def handle_health_profile_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show health profile menu"""
        try:
            user_id = update.effective_user.id
            profile = await self.health_service.get_or_create_profile(user_id)
            
            # Format profile info
            profile_text = "üë§ **–ü–†–û–§–ò–õ–¨ –ó–î–û–†–û–í–¨–Ø**\n\n"
            
            if profile.age:
                profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.age} –ª–µ—Ç\n"
            if profile.gender:
                profile_text += f"üë´ –ü–æ–ª: {profile.gender}\n"
            if profile.height:
                profile_text += f"üìè –†–æ—Å—Ç: {profile.height} —Å–º\n"
            if profile.weight:
                profile_text += f"‚öñÔ∏è –í–µ—Å: {profile.weight} –∫–≥\n"
            
            profile_text += f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile.activity_level}\n"
            profile_text += f"üéØ –¶–µ–ª—å: {profile.fitness_goal}\n"
            
            if profile.dietary_restrictions:
                profile_text += f"üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(profile.dietary_restrictions)}\n"
            if profile.allergies:
                profile_text += f"‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏: {', '.join(profile.allergies)}\n"
            
            # Calculate BMI if possible
            if profile.height and profile.weight:
                bmi = profile.weight / ((profile.height / 100) ** 2)
                profile_text += f"üìä –ò–ú–¢: {bmi:.1f}\n"
            
            # Daily goals
            daily_goals = await self.health_service.get_daily_goals(user_id)
            if daily_goals:
                profile_text += f"\nüéØ **–î–ù–ï–í–ù–´–ï –¶–ï–õ–ò:**\n"
                profile_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {daily_goals.get('calories', 0):.0f} –∫–∫–∞–ª\n"
                profile_text += f"ü•© –ë–µ–ª–∫–∏: {daily_goals.get('protein', 0):.0f}–≥\n"
                profile_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {daily_goals.get('carbs', 0):.0f}–≥\n"
                profile_text += f"ü•ë –ñ–∏—Ä—ã: {daily_goals.get('fat', 0):.0f}–≥\n"
            
            # Menu buttons
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –†–æ—Å—Ç", callback_data="health_edit_height"),
                    InlineKeyboardButton("‚öñÔ∏è –í–µ—Å", callback_data="health_edit_weight"),
                    InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="health_edit_age")
                ],
                [
                    InlineKeyboardButton("üë´ –ü–æ–ª", callback_data="health_edit_gender"),
                    InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="health_edit_activity"),
                    InlineKeyboardButton("üéØ –¶–µ–ª—å", callback_data="health_edit_goal")
                ],
                [
                    InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="health_add_workout"),
                    InlineKeyboardButton("üë£ –®–∞–≥–∏", callback_data="health_add_steps")
                ],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="health_stats"),
                    InlineKeyboardButton("üí° –°–æ–≤–µ—Ç", callback_data="health_advice_general")
                ],
                [
                    InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")
                ]
            ]
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    profile_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    profile_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
        
        except Exception as e:
            logger.error(f"Error showing health profile menu: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
    
    async def handle_food_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show food statistics"""
        try:
            query = update.callback_query
            user_id = int(query.data.split("_")[-1])
            
            # Period selection buttons
            if query.data == f"food_stats_{user_id}":
                keyboard = [
                    [
                        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"food_stats_period_{user_id}_today"),
                        InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data=f"food_stats_period_{user_id}_week")
                    ],
                    [
                        InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f"food_stats_period_{user_id}_month"),
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="health_profile_menu")
                    ]
                ]
                
                await query.edit_message_text(
                    "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ò–¢–ê–ù–ò–Ø**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
                return
            
            # Show statistics for period
            period = query.data.split("_")[-1]
            stats = await self.food_service.get_user_food_statistics(user_id, period)
            
            period_names = {
                "today": "–°–µ–≥–æ–¥–Ω—è",
                "week": "–ó–∞ –Ω–µ–¥–µ–ª—é", 
                "month": "–ó–∞ –º–µ—Å—è—Ü"
            }
            
            stats_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê: {period_names.get(period, period)}**\n\n"
            
            if stats.get("meal_count", 0) > 0:
                stats_text += f"üçΩÔ∏è –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {stats['meal_count']}\n"
                stats_text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {stats['total_calories']:.0f} –∫–∫–∞–ª\n"
                stats_text += f"ü•© –ë–µ–ª–∫–∏: {stats['total_protein']:.1f} –≥\n"
                stats_text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {stats['total_carbs']:.1f} –≥\n"
                stats_text += f"ü•ë –ñ–∏—Ä—ã: {stats['total_fat']:.1f} –≥\n"
                stats_text += f"üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø—Ä–∏–µ–º: {stats['avg_calories_per_meal']:.0f} –∫–∫–∞–ª"
            else:
                stats_text += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"food_stats_{user_id}"),
                    InlineKeyboardButton("üí° –°–æ–≤–µ—Ç", callback_data="health_advice_nutrition")
                ]
            ]
            
            await query.edit_message_text(
                stats_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing food statistics: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def handle_health_advice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Get AI health advice"""
        try:
            query = update.callback_query
            await query.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç...")
            
            user_id = update.effective_user.id
            
            # Determine advice type
            advice_type = "general"
            if "_nutrition" in query.data:
                advice_type = "nutrition"
            elif "_fitness" in query.data:
                advice_type = "fitness"
            elif "_goals" in query.data:
                advice_type = "goals"
            
            # Get AI recommendation
            recommendation = await self.ai_service.get_personalized_recommendation(
                user_id, advice_type
            )
            
            advice_text = f"ü§ñ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –°–û–í–ï–¢**\n\n{recommendation}"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data=f"health_advice_{advice_type}"),
                    InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="health_profile_menu")
                ]
            ]
            
            await query.edit_message_text(
                advice_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error getting health advice: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞")
    
    async def handle_workout_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle workout input"""
        try:
            user_id = update.effective_user.id
            text = update.message.text
            
            # Parse workout input (format: "activity duration intensity notes")
            parts = text.split()
            if len(parts) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "`[–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å] [–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö] [–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å 1-10] [–∑–∞–º–µ—Ç–∫–∏]`\n\n"
                    "–ü—Ä–∏–º–µ—Ä: `–±–µ–≥ 30 7 —É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`",
                    parse_mode="Markdown"
                )
                return
            
            activity_type = parts[0]
            duration = float(parts[1])
            intensity = int(parts[2]) if len(parts) > 2 else 5
            notes = " ".join(parts[3:]) if len(parts) > 3 else ""
            
            # Estimate calories burned (rough calculation)
            calories_burned = duration * intensity * 0.8  # Simple formula
            
            # Create workout session
            workout = WorkoutSession(
                user_id=user_id,
                activity_type=activity_type,
                duration=duration,
                calories_burned=calories_burned,
                intensity=intensity,
                notes=notes
            )
            
            # Save workout
            success = await self.health_service.save_workout(workout)
            
            if success:
                response = f"‚úÖ **–¢–†–ï–ù–ò–†–û–í–ö–ê –°–û–•–†–ê–ù–ï–ù–ê**\n\n"
                response += f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_type}\n"
                response += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.0f} –º–∏–Ω\n"
                response += f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned:.0f}\n"
                response += f"üí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity}/10\n"
                if notes:
                    response += f"üìù –ó–∞–º–µ—Ç–∫–∏: {notes}\n"
                
                keyboard = [
                    [
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="health_stats"),
                        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="health_profile_menu")
                    ]
                ]
                
                await update.message.reply_text(
                    response,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        
        except Exception as e:
            logger.error(f"Error handling workout input: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    
    async def handle_steps_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle steps input"""
        try:
            user_id = update.effective_user.id
            text = update.message.text
            
            # Parse steps
            try:
                steps = int(text)
                if steps < 0 or steps > 100000:
                    raise ValueError("Invalid steps range")
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100000)"
                )
                return
            
            # Estimate distance and calories
            distance = steps * 0.0008  # km (rough average step length)
            calories_burned = steps * 0.04  # rough calories per step
            
            # Create steps data
            steps_data = StepsData(
                user_id=user_id,
                steps=steps,
                distance=distance,
                calories_burned=calories_burned
            )
            
            # Save steps
            success = await self.health_service.save_steps(steps_data)
            
            if success:
                response = f"‚úÖ **–®–ê–ì–ò –°–û–•–†–ê–ù–ï–ù–´**\n\n"
                response += f"üë£ –®–∞–≥–∏: {steps:,}\n"
                response += f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –∫–º\n"
                response += f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {calories_burned:.0f}\n"
                
                keyboard = [
                    [
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="health_stats"),
                        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="health_profile_menu")
                    ]
                ]
                
                await update.message.reply_text(
                    response,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —à–∞–≥–∞—Ö")
        
        except Exception as e:
            logger.error(f"Error handling steps input: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —à–∞–≥–∞—Ö")
    
    async def handle_close_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Close menu"""
        try:
            await update.callback_query.delete_message()
        except Exception as e:
            logger.error(f"Error closing menu: {e}")
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")