"""Handlers for message management functionality"""

import logging
from typing import Optional, Dict, Any, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import create_keyboard, get_current_timestamp
from .services import MessageManagementService, AutoModerationService
from .models import TopicSettings

logger = logging.getLogger(__name__)

class MessageManagementHandlers:
    """Handlers for message management functionality"""
    
    def __init__(self):
        self.message_service = MessageManagementService()
        self.moderation_service = AutoModerationService()
    
    async def handle_topic_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show topic settings menu"""
        try:
            chat_id = update.effective_chat.id
            topic_id = getattr(update.effective_message, 'message_thread_id', None)
            user_id = update.effective_user.id
            
            # Check if user is admin (simplified check)
            chat_member = await context.bot.get_chat_member(chat_id, user_id)
            is_admin = chat_member.status in ['administrator', 'creator']
            
            if not is_admin:
                await update.effective_message.reply_text(
                    "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ø–∏–∫–∞"
                )
                return
            
            # Get current settings
            settings = await self.message_service.get_topic_settings(chat_id, topic_id)
            
            # Format settings info
            topic_name = settings.topic_name or (f"Topic {topic_id}" if topic_id else "General Chat")
            menu_text = f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –¢–û–ü–ò–ö–ê**\n`{topic_name}`\n\n"
            
            # Auto-deletion settings
            menu_text += "üóëÔ∏è **–ê–í–¢–û–£–î–ê–õ–ï–ù–ò–ï:**\n"
            status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings.auto_delete_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
            menu_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            
            if settings.auto_delete_enabled:
                menu_text += f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {settings.auto_delete_timeout} —Å–µ–∫\n"
                menu_text += f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {'‚úÖ' if settings.delete_bot_messages else '‚ùå'}\n"
                menu_text += f"üë• –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if settings.delete_user_messages else '‚ùå'}\n"
            
            menu_text += "\nü§ñ **AI –ê–ù–ê–õ–ò–ó:**\n"
            food_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.food_analysis_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            menu_text += f"–ê–Ω–∞–ª–∏–∑ –µ–¥—ã: {food_status}\n"
            
            if settings.food_analysis_enabled:
                auto_mode = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if settings.food_analysis_auto else "–¢–æ–ª—å–∫–æ –ø—Ä–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–∏"
                menu_text += f"–†–µ–∂–∏–º: {auto_mode}\n"
            
            ai_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.ai_assistant_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            menu_text += f"AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_status}\n"
            
            if settings.ai_assistant_enabled:
                ai_auto_mode = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if settings.ai_assistant_auto else "–¢–æ–ª—å–∫–æ –ø—Ä–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–∏"
                menu_text += f"–†–µ–∂–∏–º: {ai_auto_mode}\n"
            
            if settings.custom_prompt:
                menu_text += f"üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            
            # Create menu buttons
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üóëÔ∏è –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ", 
                        callback_data=f"topic_auto_delete_{chat_id}_{topic_id or 0}"
                    ),
                    InlineKeyboardButton(
                        "ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                        callback_data=f"topic_ai_settings_{chat_id}_{topic_id or 0}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè∑Ô∏è –¢–µ–≥–∏", 
                        callback_data=f"topic_tags_{chat_id}_{topic_id or 0}"
                    ),
                    InlineKeyboardButton(
                        "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è", 
                        callback_data=f"topic_moderation_{chat_id}_{topic_id or 0}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                        callback_data=f"topic_stats_{chat_id}_{topic_id or 0}"
                    ),
                    InlineKeyboardButton(
                        "üì§ –≠–∫—Å–ø–æ—Ä—Ç", 
                        callback_data=f"topic_export_{chat_id}_{topic_id or 0}"
                    )
                ],
                [
                    InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")
                ]
            ]
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    menu_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    menu_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
        
        except Exception as e:
            logger.error(f"Error showing topic settings menu: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ø–∏–∫–∞")
    
    async def handle_auto_delete_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle auto-delete settings"""
        try:
            query = update.callback_query
            data_parts = query.data.split("_")
            chat_id = int(data_parts[-2])
            topic_id = int(data_parts[-1]) if data_parts[-1] != "0" else None
            
            # Get current settings
            settings = await self.message_service.get_topic_settings(chat_id, topic_id)
            
            menu_text = "üóëÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–£–î–ê–õ–ï–ù–ò–Ø**\n\n"
            
            if settings.auto_delete_enabled:
                menu_text += "‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n"
                menu_text += f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {settings.auto_delete_timeout} —Å–µ–∫—É–Ω–¥\n"
                menu_text += f"ü§ñ –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {'‚úÖ' if settings.delete_bot_messages else '‚ùå'}\n"
                menu_text += f"üë• –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'‚úÖ' if settings.delete_user_messages else '‚ùå'}\n"
            else:
                menu_text += "‚ùå –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ\n"
            
            menu_text += "\n‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            # Create buttons
            keyboard = []
            
            if settings.auto_delete_enabled:
                keyboard.append([
                    InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle_auto_delete_{chat_id}_{topic_id or 0}"),
                    InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"set_delete_timeout_{chat_id}_{topic_id or 0}")
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        f"ü§ñ –ë–æ—Ç—ã: {'‚úÖ' if settings.delete_bot_messages else '‚ùå'}", 
                        callback_data=f"toggle_delete_bots_{chat_id}_{topic_id or 0}"
                    ),
                    InlineKeyboardButton(
                        f"üë• –Æ–∑–µ—Ä—ã: {'‚úÖ' if settings.delete_user_messages else '‚ùå'}", 
                        callback_data=f"toggle_delete_users_{chat_id}_{topic_id or 0}"
                    )
                ])
            else:
                keyboard.append([
                    InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle_auto_delete_{chat_id}_{topic_id or 0}")
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="topic_settings_menu")
            ])
            
            await query.edit_message_text(
                menu_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing auto-delete settings: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è")
    
    async def handle_toggle_auto_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Toggle auto-delete setting"""
        try:
            query = update.callback_query
            data_parts = query.data.split("_")
            chat_id = int(data_parts[-2])
            topic_id = int(data_parts[-1]) if data_parts[-1] != "0" else None
            
            # Get current settings
            settings = await self.message_service.get_topic_settings(chat_id, topic_id)
            
            # Toggle setting
            new_enabled = not settings.auto_delete_enabled
            
            success = await self.message_service.update_topic_settings(
                chat_id, topic_id, {"auto_delete_enabled": new_enabled}
            )
            
            if success:
                status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
                await query.answer(f"‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ {status}")
                
                # Refresh the menu
                await self.handle_auto_delete_settings(update, context)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        except Exception as e:
            logger.error(f"Error toggling auto-delete: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    async def handle_ai_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle AI settings"""
        try:
            query = update.callback_query
            data_parts = query.data.split("_")
            chat_id = int(data_parts[-2])
            topic_id = int(data_parts[-1]) if data_parts[-1] != "0" else None
            
            # Get current settings
            settings = await self.message_service.get_topic_settings(chat_id, topic_id)
            
            menu_text = "ü§ñ **–ù–ê–°–¢–†–û–ô–ö–ò AI**\n\n"
            
            # Food analysis settings
            menu_text += "üçΩÔ∏è **–ê–ù–ê–õ–ò–ó –ï–î–´:**\n"
            food_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.food_analysis_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            menu_text += f"–°—Ç–∞—Ç—É—Å: {food_status}\n"
            
            if settings.food_analysis_enabled:
                food_mode = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if settings.food_analysis_auto else "–ü—Ä–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–∏"
                menu_text += f"–†–µ–∂–∏–º: {food_mode}\n"
            
            # AI assistant settings
            menu_text += "\nüß† **AI –ê–°–°–ò–°–¢–ï–ù–¢:**\n"
            ai_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if settings.ai_assistant_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            menu_text += f"–°—Ç–∞—Ç—É—Å: {ai_status}\n"
            
            if settings.ai_assistant_enabled:
                ai_mode = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if settings.ai_assistant_auto else "–ü—Ä–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–∏"
                menu_text += f"–†–µ–∂–∏–º: {ai_mode}\n"
            
            if settings.custom_prompt:
                menu_text += f"üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            else:
                menu_text += f"üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            
            # Create buttons
            keyboard = [
                [
                    InlineKeyboardButton(
                        f"üçΩÔ∏è –ï–¥–∞: {'‚úÖ' if settings.food_analysis_enabled else '‚ùå'}", 
                        callback_data=f"toggle_food_analysis_{chat_id}_{topic_id or 0}"
                    ),
                    InlineKeyboardButton(
                        f"üß† AI: {'‚úÖ' if settings.ai_assistant_enabled else '‚ùå'}", 
                        callback_data=f"toggle_ai_assistant_{chat_id}_{topic_id or 0}"
                    )
                ]
            ]
            
            if settings.food_analysis_enabled:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üçΩÔ∏è –†–µ–∂–∏–º: {'–ê–≤—Ç–æ' if settings.food_analysis_auto else '@'}", 
                        callback_data=f"toggle_food_auto_{chat_id}_{topic_id or 0}"
                    )
                ])
            
            if settings.ai_assistant_enabled:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üß† –†–µ–∂–∏–º: {'–ê–≤—Ç–æ' if settings.ai_assistant_auto else '@'}", 
                        callback_data=f"toggle_ai_auto_{chat_id}_{topic_id or 0}"
                    )
                ])
            
            keyboard.extend([
                [
                    InlineKeyboardButton("üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data=f"set_custom_prompt_{chat_id}_{topic_id or 0}")
                ],
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="topic_settings_menu")
                ]
            ])
            
            await query.edit_message_text(
                menu_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing AI settings: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ AI –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def handle_message_tags_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle message tags menu"""
        try:
            query = update.callback_query
            data_parts = query.data.split("_")
            chat_id = int(data_parts[-2])
            topic_id = int(data_parts[-1]) if data_parts[-1] != "0" else None
            
            # Get existing tags
            tags = await self.message_service.get_chat_tags(chat_id, topic_id)
            
            menu_text = "üè∑Ô∏è **–¢–ï–ì–ò –°–û–û–ë–©–ï–ù–ò–ô**\n\n"
            
            if tags:
                menu_text += f"üìä –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤: {len(tags)}\n\n"
                
                for tag in tags[:10]:  # Show first 10 tags
                    menu_text += f"{tag.emoji} **{tag.name}**"
                    if tag.description:
                        menu_text += f" - {tag.description}"
                    menu_text += f" (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {tag.usage_count})\n"
                
                if len(tags) > 10:
                    menu_text += f"\n...–∏ –µ—â–µ {len(tags) - 10} —Ç–µ–≥–æ–≤"
            else:
                menu_text += "üì≠ –¢–µ–≥–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã\n\n"
                menu_text += "üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            # Create buttons
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥", callback_data=f"create_tag_{chat_id}_{topic_id or 0}"),
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º", callback_data=f"search_tags_{chat_id}_{topic_id or 0}")
                ],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–≥–æ–≤", callback_data=f"tag_stats_{chat_id}_{topic_id or 0}"),
                    InlineKeyboardButton("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"manage_tags_{chat_id}_{topic_id or 0}")
                ],
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="topic_settings_menu")
                ]
            ]
            
            await query.edit_message_text(
                menu_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing tags menu: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ç–µ–≥–æ–≤")
    
    async def handle_message_with_bot_mention(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """Handle message that mentions the bot"""
        try:
            chat_id = update.effective_chat.id
            message_id = update.message.message_id
            topic_id = getattr(update.message, 'message_thread_id', None)
            text = update.message.text
            user_id = update.effective_user.id
            
            # Process the message
            result = await self.message_service.process_message_with_bot_mention(
                chat_id, message_id, topic_id, text, user_id
            )
            
            if result.get("processed"):
                # Schedule auto-deletion if needed
                await self.message_service.schedule_message_deletion(
                    chat_id, message_id, topic_id, user_id, "user", text[:100]
                )
                
                return result.get("response_type", "general_ai")
            
            return "general_ai"
            
        except Exception as e:
            logger.error(f"Error handling message with bot mention: {e}")
            return "general_ai"
    
    async def handle_automatic_message_processing(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle automatic message processing (filters, etc.)"""
        try:
            chat_id = update.effective_chat.id
            message_id = update.message.message_id
            topic_id = getattr(update.message, 'message_thread_id', None)
            text = update.message.text or ""
            user_id = update.effective_user.id
            
            # Check message filters
            filter_actions = await self.moderation_service.check_message_filters(
                chat_id, topic_id, text, user_id, "user"
            )
            
            # Apply filter actions
            if filter_actions.get("auto_delete"):
                try:
                    await context.bot.delete_message(chat_id, message_id)
                    logger.info(f"Auto-deleted message {message_id} due to filter match")
                except Exception as e:
                    logger.error(f"Failed to auto-delete message: {e}")
            
            # Auto-tag if needed
            if filter_actions.get("auto_tag"):
                await self.message_service.tag_message(
                    chat_id, message_id, topic_id, user_id, text,
                    filter_actions["auto_tag"], 0  # 0 = system tagged
                )
            
            # Forward if needed
            if filter_actions.get("forward_to_chat"):
                try:
                    await context.bot.forward_message(
                        filter_actions["forward_to_chat"], chat_id, message_id
                    )
                except Exception as e:
                    logger.error(f"Failed to forward message: {e}")
            
            # Schedule regular auto-deletion
            await self.message_service.schedule_message_deletion(
                chat_id, message_id, topic_id, user_id, "user", text[:100]
            )
            
        except Exception as e:
            logger.error(f"Error in automatic message processing: {e}")
    
    async def handle_bot_message_posted(self, chat_id: int, message_id: int, 
                                      topic_id: Optional[int] = None, 
                                      content: str = "") -> None:
        """Handle when bot posts a message (for auto-deletion)"""
        try:
            # Schedule auto-deletion for bot message
            await self.message_service.schedule_message_deletion(
                chat_id, message_id, topic_id, 0, "bot", content[:100]
            )
        except Exception as e:
            logger.error(f"Error handling bot message posted: {e}")
    
    async def handle_close_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Close menu"""
        try:
            await update.callback_query.delete_message()
        except Exception as e:
            logger.error(f"Error closing menu: {e}")
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")