"""Handlers for movie expert functionality"""

import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from core.utils import create_keyboard, get_current_timestamp, is_valid_rating
from .services import MovieExpertService, MovieAIService
from .models import MovieEntry

logger = logging.getLogger(__name__)

class MovieExpertHandlers:
    """Handlers for movie expert functionality"""
    
    def __init__(self):
        self.movie_service = MovieExpertService()
        self.ai_service = MovieAIService()
    
    async def handle_movie_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show movie expert menu"""
        try:
            user_id = update.effective_user.id
            
            # Get user stats
            stats = await self.movie_service.get_user_stats(user_id)
            
            menu_text = "üé¨ **–ö–ò–ù–û–≠–ö–°–ü–ï–†–¢**\n\n"
            
            if stats.total_movies > 0 or stats.total_series > 0:
                menu_text += f"üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                menu_text += f"üé• –§–∏–ª—å–º–æ–≤: {stats.total_movies}\n"
                menu_text += f"üì∫ –°–µ—Ä–∏–∞–ª–æ–≤: {stats.total_series}\n"
                menu_text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats.average_rating}/10\n"
                menu_text += f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {stats.total_watch_time//60}—á {stats.total_watch_time%60}–º\n"
                
                if stats.favorite_genres:
                    menu_text += f"üé≠ –õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã: {', '.join(stats.favorite_genres[:3])}\n"
                
                menu_text += f"üìÖ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {stats.movies_this_month}\n"
                menu_text += f"üìÜ –ó–∞ —ç—Ç–æ—Ç –≥–æ–¥: {stats.movies_this_year}\n"
                
                if stats.highest_rated_movie:
                    menu_text += f"üèÜ –õ—É—á—à–∏–π: {stats.highest_rated_movie}\n"
            else:
                menu_text += "üìù –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!\n\n"
                menu_text += "üí° **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º:**\n"
                menu_text += "–ù–∞–ø–∏—à–∏—Ç–µ: '–ü–æ—Å–º–æ—Ç—Ä–µ–ª [–Ω–∞–∑–≤–∞–Ω–∏–µ] –æ—Ü–µ–Ω–∫–∞ 8/10'\n"
                menu_text += "–ü—Ä–∏–º–µ—Ä: '–ü–æ—Å–º–æ—Ç—Ä–µ–ª –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä –æ—Ü–µ–Ω–∫–∞ 9/10'\n"
            
            # Menu buttons
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="movie_add"),
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="movie_search")
                ],
                [
                    InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="movie_recommendations"),
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="movie_stats")
                ],
                [
                    InlineKeyboardButton("üìã –ú–æ–∏ —Ñ–∏–ª—å–º—ã", callback_data="movie_list"),
                    InlineKeyboardButton("‚≠ê –¢–æ–ø —Ñ–∏–ª—å–º—ã", callback_data="movie_top")
                ],
                [
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="movie_export"),
                    InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")
                ]
            ]
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    menu_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    menu_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
        
        except Exception as e:
            logger.error(f"Error showing movie menu: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤")
    
    async def handle_movie_recommendations(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show movie recommendations"""
        try:
            query = update.callback_query
            await query.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
            
            user_id = update.effective_user.id
            
            # Get recommendations
            recommendations = await self.movie_service.get_recommendations(user_id, 5)
            
            if not recommendations:
                text = "ü§∑‚Äç‚ôÇÔ∏è **–ù–ï–¢ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô**\n\n"
                text += "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!\n\n"
                text += "üí° –ù–∞–ø–∏—à–∏—Ç–µ: '–ü–æ—Å–º–æ—Ç—Ä–µ–ª [–Ω–∞–∑–≤–∞–Ω–∏–µ] –æ—Ü–µ–Ω–∫–∞ X/10'"
            else:
                text = "üé¨ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**\n\n"
                
                for i, rec in enumerate(recommendations, 1):
                    media_type = "üì∫ –°–µ—Ä–∏–∞–ª" if rec.is_series else "üé• –§–∏–ª—å–º"
                    
                    text += f"**{i}. {rec.title}**"
                    if rec.year:
                        text += f" ({rec.year})"
                    text += f"\n{media_type}"
                    
                    if rec.genre:
                        text += f" | {', '.join(rec.genre[:2])}"
                    text += "\n"
                    
                    if rec.director:
                        text += f"üé≠ –†–µ–∂–∏—Å—Å–µ—Ä: {rec.director}\n"
                    
                    if rec.description:
                        text += f"üìù {rec.description}\n"
                    
                    text += f"üí° **–ü–æ—á–µ–º—É:** {rec.reason}\n"
                    text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence*100:.0f}%\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="movie_recommendations"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="movie_menu")
                ]
            ]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing recommendations: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    async def handle_movie_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show user's movie list"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            # Get user's movies
            movies = await self.movie_service.get_user_movies(user_id, 20)
            
            if not movies:
                text = "üì≠ **–°–ü–ò–°–û–ö –ü–£–°–¢**\n\n"
                text += "–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.\n\n"
                text += "üí° –ù–∞–ø–∏—à–∏—Ç–µ: '–ü–æ—Å–º–æ—Ç—Ä–µ–ª [–Ω–∞–∑–≤–∞–Ω–∏–µ] –æ—Ü–µ–Ω–∫–∞ X/10'"
            else:
                text = f"üìã **–ú–û–ò –§–ò–õ–¨–ú–´** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(movies)})\n\n"
                
                for movie in movies:
                    media_type = "üì∫" if movie.is_series else "üé•"
                    date_str = movie.watch_date.strftime("%d.%m.%Y")
                    
                    text += f"{media_type} **{movie.title}**"
                    if movie.year:
                        text += f" ({movie.year})"
                    text += f" - ‚≠ê{movie.rating}/10\n"
                    
                    if movie.genre:
                        text += f"üé≠ {', '.join(movie.genre[:2])}\n"
                    
                    text += f"üìÖ {date_str}"
                    
                    if movie.review:
                        review_short = movie.review[:50] + "..." if len(movie.review) > 50 else movie.review
                        text += f"\nüí≠ {review_short}"
                    
                    text += "\n\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="movie_search"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="movie_export")
                ],
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="movie_menu")
                ]
            ]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing movie list: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤")
    
    async def handle_movie_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Show detailed movie statistics"""
        try:
            query = update.callback_query
            user_id = update.effective_user.id
            
            # Get detailed stats
            stats = await self.movie_service.get_user_stats(user_id)
            
            text = "üìä **–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
            
            if stats.total_movies == 0 and stats.total_series == 0:
                text += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
                text += "–î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
            else:
                # General stats
                text += f"üé• **–§–∏–ª—å–º—ã:** {stats.total_movies}\n"
                text += f"üì∫ **–°–µ—Ä–∏–∞–ª—ã:** {stats.total_series}\n"
                text += f"üé¨ **–í—Å–µ–≥–æ:** {stats.total_movies + stats.total_series}\n\n"
                
                # Time and ratings
                total_hours = stats.total_watch_time // 60
                total_minutes = stats.total_watch_time % 60
                text += f"‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:** {total_hours}—á {total_minutes}–º\n"
                text += f"‚≠ê **–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:** {stats.average_rating}/10\n\n"
                
                # Period stats
                text += f"üìÖ **–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:** {stats.movies_this_month}\n"
                text += f"üìÜ **–ó–∞ —ç—Ç–æ—Ç –≥–æ–¥:** {stats.movies_this_year}\n\n"
                
                # Favorites
                if stats.favorite_genres:
                    text += f"üé≠ **–õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã:**\n"
                    for genre in stats.favorite_genres[:5]:
                        text += f"‚Ä¢ {genre}\n"
                    text += "\n"
                
                # Best/worst
                if stats.highest_rated_movie:
                    text += f"üèÜ **–õ—É—á—à–∏–π:** {stats.highest_rated_movie}\n"
                if stats.lowest_rated_movie:
                    text += f"üëé **–•—É–¥—à–∏–π:** {stats.lowest_rated_movie}\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üìà –¢—Ä–µ–Ω–¥—ã", callback_data="movie_trends"),
                    InlineKeyboardButton("üèÜ –¢–æ–ø-10", callback_data="movie_top")
                ],
                [
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="movie_menu")
                ]
            ]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error showing movie stats: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def handle_movie_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle movie-related text messages"""
        try:
            user_id = update.effective_user.id
            message_text = update.message.text
            
            # Process with AI service
            response = await self.ai_service.process_movie_message(user_id, message_text)
            
            # Add action buttons if movie was saved
            if "—Å–æ—Ö—Ä–∞–Ω–µ–Ω" in response:
                keyboard = [
                    [
                        InlineKeyboardButton("üé¨ –ú–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤", callback_data="movie_menu"),
                        InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="movie_recommendations")
                    ]
                ]
                
                await update.message.reply_text(
                    response,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(response, parse_mode="Markdown")
        
        except Exception as e:
            logger.error(f"Error handling movie message: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö")
    
    async def handle_movie_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle movie search"""
        try:
            query = update.callback_query
            
            # For now, show instruction
            text = "üîç **–ü–û–ò–°–ö –§–ò–õ–¨–ú–û–í**\n\n"
            text += "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∂–∞–Ω—Ä, —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            text += "–ü—Ä–∏–º–µ—Ä—ã:\n"
            text += "‚Ä¢ '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä'\n"
            text += "‚Ä¢ '–ù–æ–ª–∞–Ω'\n"
            text += "‚Ä¢ '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'\n"
            text += "‚Ä¢ '–∫–æ—Å–º–æ—Å'"
            
            keyboard = [
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="movie_menu")]
            ]
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error handling movie search: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
    
    async def handle_search_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query: str) -> None:
        """Handle actual search query"""
        try:
            user_id = update.effective_user.id
            
            # Search in user's movies
            movies = await self.movie_service.search_user_movies(user_id, query)
            
            if not movies:
                text = f"üîç **–ü–û–ò–°–ö: '{query}'**\n\n"
                text += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
            else:
                text = f"üîç **–ü–û–ò–°–ö: '{query}'**\n\n"
                text += f"–ù–∞–π–¥–µ–Ω–æ {len(movies)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–æ–≤):\n\n"
                
                for movie in movies[:10]:  # Limit to 10 results
                    media_type = "üì∫" if movie.is_series else "üé•"
                    text += f"{media_type} **{movie.title}**"
                    if movie.year:
                        text += f" ({movie.year})"
                    text += f" - ‚≠ê{movie.rating}/10\n"
                    
                    if movie.genre:
                        text += f"üé≠ {', '.join(movie.genre[:2])}\n"
                    
                    if movie.review and query.lower() in movie.review.lower():
                        text += f"üí≠ ...{movie.review[:100]}...\n"
                    
                    text += "\n"
            
            keyboard = [
                [
                    InlineKeyboardButton("üé¨ –ú–µ–Ω—é", callback_data="movie_menu"),
                    InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="movie_search")
                ]
            ]
            
            await update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        except Exception as e:
            logger.error(f"Error handling search query: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
    
    async def handle_close_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Close menu"""
        try:
            await update.callback_query.delete_message()
        except Exception as e:
            logger.error(f"Error closing menu: {e}")
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")