"""Models for movie expert functionality"""

from dataclasses import dataclass, field
from typing import Optional, Dict, Any, List
from datetime import datetime
from core.utils import generate_uuid, get_current_timestamp

@dataclass
class MovieEntry:
    """Individual movie entry"""
    id: str = field(default_factory=generate_uuid)
    user_id: int = 0
    title: str = ""
    year: Optional[int] = None
    genre: List[str] = field(default_factory=list)
    director: Optional[str] = None
    rating: float = 5.0  # 1-10 scale
    review: str = ""
    watch_date: datetime = field(default_factory=get_current_timestamp)
    is_series: bool = False
    season: Optional[int] = None
    episode: Optional[int] = None
    duration: Optional[int] = None  # minutes
    imdb_id: Optional[str] = None
    poster_url: Optional[str] = None
    created_at: datetime = field(default_factory=get_current_timestamp)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'user_id': self.user_id,
            'title': self.title,
            'year': self.year,
            'genre': self.genre,
            'director': self.director,
            'rating': self.rating,
            'review': self.review,
            'watch_date': self.watch_date,
            'is_series': self.is_series,
            'season': self.season,
            'episode': self.episode,
            'duration': self.duration,
            'imdb_id': self.imdb_id,
            'poster_url': self.poster_url,
            'created_at': self.created_at
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'MovieEntry':
        return cls(
            id=data.get('id', generate_uuid()),
            user_id=data.get('user_id', 0),
            title=data.get('title', ''),
            year=data.get('year'),
            genre=data.get('genre', []),
            director=data.get('director'),
            rating=data.get('rating', 5.0),
            review=data.get('review', ''),
            watch_date=data.get('watch_date', get_current_timestamp()),
            is_series=data.get('is_series', False),
            season=data.get('season'),
            episode=data.get('episode'),
            duration=data.get('duration'),
            imdb_id=data.get('imdb_id'),
            poster_url=data.get('poster_url'),
            created_at=data.get('created_at', get_current_timestamp())
        )

@dataclass
class MovieRecommendation:
    """Movie recommendation generated by AI"""
    id: str = field(default_factory=generate_uuid)
    user_id: int = 0
    title: str = ""
    year: Optional[int] = None
    genre: List[str] = field(default_factory=list)
    director: Optional[str] = None
    description: str = ""
    reason: str = ""  # Why it's recommended
    confidence: float = 0.0  # AI confidence score
    imdb_rating: Optional[float] = None
    imdb_id: Optional[str] = None
    poster_url: Optional[str] = None
    is_series: bool = False
    created_at: datetime = field(default_factory=get_current_timestamp)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'user_id': self.user_id,
            'title': self.title,
            'year': self.year,
            'genre': self.genre,
            'director': self.director,
            'description': self.description,
            'reason': self.reason,
            'confidence': self.confidence,
            'imdb_rating': self.imdb_rating,
            'imdb_id': self.imdb_id,
            'poster_url': self.poster_url,
            'is_series': self.is_series,
            'created_at': self.created_at
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'MovieRecommendation':
        return cls(
            id=data.get('id', generate_uuid()),
            user_id=data.get('user_id', 0),
            title=data.get('title', ''),
            year=data.get('year'),
            genre=data.get('genre', []),
            director=data.get('director'),
            description=data.get('description', ''),
            reason=data.get('reason', ''),
            confidence=data.get('confidence', 0.0),
            imdb_rating=data.get('imdb_rating'),
            imdb_id=data.get('imdb_id'),
            poster_url=data.get('poster_url'),
            is_series=data.get('is_series', False),
            created_at=data.get('created_at', get_current_timestamp())
        )

@dataclass
class MovieStats:
    """User movie statistics"""
    user_id: int = 0
    total_movies: int = 0
    total_series: int = 0
    total_watch_time: int = 0  # minutes
    average_rating: float = 0.0
    favorite_genres: List[str] = field(default_factory=list)
    favorite_directors: List[str] = field(default_factory=list)
    movies_this_month: int = 0
    movies_this_year: int = 0
    highest_rated_movie: Optional[str] = None
    lowest_rated_movie: Optional[str] = None
    last_updated: datetime = field(default_factory=get_current_timestamp)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'user_id': self.user_id,
            'total_movies': self.total_movies,
            'total_series': self.total_series,
            'total_watch_time': self.total_watch_time,
            'average_rating': self.average_rating,
            'favorite_genres': self.favorite_genres,
            'favorite_directors': self.favorite_directors,
            'movies_this_month': self.movies_this_month,
            'movies_this_year': self.movies_this_year,
            'highest_rated_movie': self.highest_rated_movie,
            'lowest_rated_movie': self.lowest_rated_movie,
            'last_updated': self.last_updated
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'MovieStats':
        return cls(
            user_id=data.get('user_id', 0),
            total_movies=data.get('total_movies', 0),
            total_series=data.get('total_series', 0),
            total_watch_time=data.get('total_watch_time', 0),
            average_rating=data.get('average_rating', 0.0),
            favorite_genres=data.get('favorite_genres', []),
            favorite_directors=data.get('favorite_directors', []),
            movies_this_month=data.get('movies_this_month', 0),
            movies_this_year=data.get('movies_this_year', 0),
            highest_rated_movie=data.get('highest_rated_movie'),
            lowest_rated_movie=data.get('lowest_rated_movie'),
            last_updated=data.get('last_updated', get_current_timestamp())
        )

@dataclass
class WatchList:
    """User's watch list"""
    id: str = field(default_factory=generate_uuid)
    user_id: int = 0
    title: str = ""
    year: Optional[int] = None
    genre: List[str] = field(default_factory=list)
    director: Optional[str] = None
    description: str = ""
    priority: int = 5  # 1-10 priority
    source: str = "manual"  # manual, recommendation, friend
    imdb_id: Optional[str] = None
    poster_url: Optional[str] = None
    is_series: bool = False
    added_at: datetime = field(default_factory=get_current_timestamp)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'user_id': self.user_id,
            'title': self.title,
            'year': self.year,
            'genre': self.genre,
            'director': self.director,
            'description': self.description,
            'priority': self.priority,
            'source': self.source,
            'imdb_id': self.imdb_id,
            'poster_url': self.poster_url,
            'is_series': self.is_series,
            'added_at': self.added_at
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'WatchList':
        return cls(
            id=data.get('id', generate_uuid()),
            user_id=data.get('user_id', 0),
            title=data.get('title', ''),
            year=data.get('year'),
            genre=data.get('genre', []),
            director=data.get('director'),
            description=data.get('description', ''),
            priority=data.get('priority', 5),
            source=data.get('source', 'manual'),
            imdb_id=data.get('imdb_id'),
            poster_url=data.get('poster_url'),
            is_series=data.get('is_series', False),
            added_at=data.get('added_at', get_current_timestamp())
        )

@dataclass
class MoviePreferences:
    """User movie preferences"""
    user_id: int = 0
    preferred_genres: List[str] = field(default_factory=list)
    disliked_genres: List[str] = field(default_factory=list)
    preferred_directors: List[str] = field(default_factory=list)
    preferred_actors: List[str] = field(default_factory=list)
    preferred_decades: List[str] = field(default_factory=list)  # 1980s, 1990s, etc.
    preferred_countries: List[str] = field(default_factory=list)
    preferred_languages: List[str] = field(default_factory=list)
    min_rating: float = 5.0
    max_duration: Optional[int] = None  # minutes
    include_series: bool = True
    include_movies: bool = True
    avoid_spoilers: bool = True
    updated_at: datetime = field(default_factory=get_current_timestamp)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'user_id': self.user_id,
            'preferred_genres': self.preferred_genres,
            'disliked_genres': self.disliked_genres,
            'preferred_directors': self.preferred_directors,
            'preferred_actors': self.preferred_actors,
            'preferred_decades': self.preferred_decades,
            'preferred_countries': self.preferred_countries,
            'preferred_languages': self.preferred_languages,
            'min_rating': self.min_rating,
            'max_duration': self.max_duration,
            'include_series': self.include_series,
            'include_movies': self.include_movies,
            'avoid_spoilers': self.avoid_spoilers,
            'updated_at': self.updated_at
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'MoviePreferences':
        return cls(
            user_id=data.get('user_id', 0),
            preferred_genres=data.get('preferred_genres', []),
            disliked_genres=data.get('disliked_genres', []),
            preferred_directors=data.get('preferred_directors', []),
            preferred_actors=data.get('preferred_actors', []),
            preferred_decades=data.get('preferred_decades', []),
            preferred_countries=data.get('preferred_countries', []),
            preferred_languages=data.get('preferred_languages', []),
            min_rating=data.get('min_rating', 5.0),
            max_duration=data.get('max_duration'),
            include_series=data.get('include_series', True),
            include_movies=data.get('include_movies', True),
            avoid_spoilers=data.get('avoid_spoilers', True),
            updated_at=data.get('updated_at', get_current_timestamp())
        )