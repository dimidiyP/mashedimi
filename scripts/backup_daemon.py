#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤ –±–µ–∑ cron
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ supervisor –ø—Ä–æ—Ü–µ—Å—Å –∏ –¥–µ–ª–∞–µ—Ç –±—ç–∫–∞–ø—ã –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –º–æ–¥—É–ª—è–º
sys.path.append('/app/scripts')

from backup_system import BackupSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/backup_daemon.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BackupDaemon:
    def __init__(self):
        self.backup_system = BackupSystem()
        self.backup_interval = 24 * 60 * 60  # 24 hours in seconds
        self.last_backup = None
        
    async def run_backup(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫–∞–ø"""
        try:
            logger.info("üîÑ Starting scheduled backup...")
            
            backup_path = await self.backup_system.create_full_backup()
            
            if backup_path:
                logger.info(f"‚úÖ Scheduled backup successful: {backup_path}")
                self.last_backup = datetime.now()
                
                # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
                self.backup_system.cleanup_old_backups()
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.backup_system.get_backup_stats()
                if stats:
                    logger.info(f"üìä Backup stats: {stats}")
                    
                return True
            else:
                logger.error("‚ùå Scheduled backup failed")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Backup error: {str(e)}")
            return False
    
    def should_run_backup(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø"""
        if self.last_backup is None:
            return True
            
        time_since_backup = datetime.now() - self.last_backup
        return time_since_backup.total_seconds() >= self.backup_interval
    
    async def run_daemon(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–µ–º–æ–Ω–∞"""
        logger.info("üöÄ Backup daemon started")
        logger.info(f"üìÖ Backup interval: {self.backup_interval / 3600} hours")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—ç–∫–∞–ø—ã
        stats = self.backup_system.get_backup_stats()
        if stats and stats['total_backups'] > 0:
            logger.info(f"üì¶ Found {stats['total_backups']} existing backups")
        else:
            # –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø
            logger.info("üîÑ Creating initial backup...")
            await self.run_backup()
        
        while True:
            try:
                if self.should_run_backup():
                    await self.run_backup()
                else:
                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—ç–∫–∞–ø–∞
                    if self.last_backup:
                        next_backup = self.last_backup + timedelta(seconds=self.backup_interval)
                        logger.info(f"‚è∞ Next backup scheduled for: {next_backup.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –ñ–¥–∞—Ç—å 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(3600)  # 1 hour
                
            except KeyboardInterrupt:
                logger.info("üõë Backup daemon stopped by user")
                break
            except Exception as e:
                logger.error(f"‚ùå Daemon error: {str(e)}")
                # –ñ–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(300)

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    daemon = BackupDaemon()
    await daemon.run_daemon()

if __name__ == "__main__":
    asyncio.run(main())