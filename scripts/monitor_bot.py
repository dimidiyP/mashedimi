#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞ –¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç webhook –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
"""

import requests
import time
import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/bot_monitor.log'),
        logging.StreamHandler()
    ]
)

class BotMonitor:
    def __init__(self):
        load_dotenv('/app/backend/.env')
        self.token = os.environ.get('TELEGRAM_TOKEN')
        
        # Determine environment and URLs
        environment = os.environ.get('ENVIRONMENT', 'development')
        if environment == 'production':
            self.backend_url = 'https://baseshinomontaz.store'
            self.webhook_url = 'https://baseshinomontaz.store/webhook.php'
        else:
            # Development environment
            self.backend_url = 'https://8867069a-d008-4da6-8b30-bdb8e855fcb4.preview.emergentagent.com'
            self.webhook_url = 'https://baseshinomontaz.store/webhook.php'
        
        if not self.token:
            raise ValueError("TELEGRAM_TOKEN not found")
            
    def check_webhook(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è webhook"""
        try:
            response = requests.get(f'https://api.telegram.org/bot{self.token}/getWebhookInfo', timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    webhook_info = data.get('result', {})
                    current_url = webhook_info.get('url', '')
                    
                    if current_url == self.webhook_url:
                        logging.info("‚úÖ Webhook OK")
                        return True
                    else:
                        logging.warning(f"‚ùå Webhook URL mismatch: {current_url}")
                        return False
                else:
                    logging.error(f"‚ùå Telegram API error: {data}")
                    return False
            else:
                logging.error(f"‚ùå HTTP error: {response.status_code}")
                return False
        except Exception as e:
            logging.error(f"‚ùå Webhook check failed: {e}")
            return False
    
    def set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        try:
            response = requests.post(
                f'https://api.telegram.org/bot{self.token}/setWebhook',
                json={'url': self.webhook_url},
                timeout=10
            )
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {data}")
                    return False
            else:
                logging.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.status_code}")
                return False
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False
    
    def check_backend_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è backend"""
        try:
            response = requests.get(f'{self.backend_url}/api/health', timeout=5)
            if response.status_code == 200:
                logging.info("‚úÖ Backend –∑–¥–æ—Ä–æ–≤")
                return True
            else:
                logging.warning(f"‚ùå Backend –Ω–µ–∑–¥–æ—Ä–æ–≤: {response.status_code}")
                return False
        except Exception as e:
            logging.error(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞...")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
                backend_ok = self.check_backend_health()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
                webhook_ok = self.check_webhook()
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ webhook –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                if backend_ok and not webhook_ok:
                    logging.info("üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook...")
                    self.set_webhook()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except KeyboardInterrupt:
                logging.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ

if __name__ == "__main__":
    monitor = BotMonitor()
    monitor.monitor_loop()